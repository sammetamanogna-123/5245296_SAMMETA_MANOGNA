#include<stdio.h>
#include<stdlib.h>
#include<stdbool.h>

typedef struct {
    int x, y, moves;
} Node;

int minimumMoves(char **grid, int n, int startX, int startY, int goalX, int goalY) {
    bool visited[n][n];
    for (int i=0;i<n;i++) 
        for (int j=0;j<n;j++) 
            visited[i][j] = false;
            
            Node* queue = malloc(n*n*sizeof(Node));
            int front = 0, rear = 0;
            
            queue[rear++] = (Node){startX, startY, 0};
            visited[startX][startY]=true;
            
            int dx[4]={-1,1,0,0};
            int dy[4]={0,0,-1,1};
            
            while(front<rear) {
                Node curr = queue[front++];
                if(curr .x==goalX && curr .y==goalY) return curr.moves;
                
                for(int dir=0;dir<4;dir++) {
                    int nx=curr.x+dx[dir];
                    int ny=curr.y+dy[dir];
                    
                    while(nx>=0 && nx<n && ny>=0 && ny<n && grid[nx][ny]=='.') {
                        if(!visited[nx][ny]) {
                            visited[nx][ny]=true;
                            queue[rear++] = (Node) {nx, ny, curr.moves+1};
                        }
                        nx += dx[dir];
                        ny += dy[dir];
                    }
                }
            }
            free(queue);
            return -1;
}
int main() {
    int n;
    scanf("%d", &n);
    char** grid = malloc(n*sizeof(char*));
    for(int i=0;i<n;i++) {
        grid[i] = malloc((n+1)*sizeof(char));
        scanf("%s", grid[i]);
    }
    int startX, startY, goalX, goalY;
    scanf("%d %d %d %d", &startX, &startY, &goalX, &goalY);
    printf("%d\n",minimumMoves(grid, n, startX, startY, goalX, goalY));
    for(int i=0;i<n;i++) free(grid[i]);
    free(grid);
    return 0;
}
