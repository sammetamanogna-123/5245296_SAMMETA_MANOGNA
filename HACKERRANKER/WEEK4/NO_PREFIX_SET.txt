#include<stdio.h>
#include<stdlib.h>
#include<string.h>

#define ALPHABET_SIZE 26
typedef struct TrieNode {
    int isEnd;
    struct TrieNode* children[ALPHABET_SIZE];
} TrieNode;
TrieNode* newNode() {
    TrieNode* node = (TrieNode*)malloc(sizeof(TrieNode));
    node->isEnd = 0;
    for(int i=0;i<ALPHABET_SIZE;i++) {
        node->children[i] = NULL;
    }
    return node;
}
int insertTrie(TrieNode* root, const char* word) {
    TrieNode* current = root;
    for(int i=0;word[i] != '\0';i++) {
        int index = word[i] - 'a';
        if(current->isEnd) {
            return 1;
        }
        if(current->children[index] == NULL) {
            current->children[index] = newNode();
        }
        current = current->children[index];
    }
    for(int i=0;i<ALPHABET_SIZE;i++) {
        if(current->children[i] != NULL) {
            return 1;
        }
    }
    if(current->isEnd) {
        return 1;
    }
    current->isEnd = 1;
    return 0;
}
int main() {
    int n;
    scanf("%d", &n);
    TrieNode* root = newNode();
    char word[64];
    for(int i=0;i<n;i++) {
        scanf("%s", word);
        
        if(insertTrie(root, word)) {
            printf("BAD SET\n%s\n", word);
            return 0;
        }
    }
    printf("GOOD SET\n");
    return 0;
}
