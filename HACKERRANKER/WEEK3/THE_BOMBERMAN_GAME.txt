#include <bits/stdc++.h>

using namespace std;

string ltrim(const string &);
string rtrim(const string &);
vector<string> split(const string &);

/*
 * Complete the 'bomberMan' function below.
 *
 * The function is expected to return a STRING_ARRAY.
 * The function accepts following parameters:
 *  1. INTEGER n
 *  2. STRING_ARRAY grid
 */

vector<string> explode(vector<string> grid) {
    int r = grid.size();
    int c= grid[0].size();
    vector<string> result(r, string(c, '0'));
    int dr[4]={-1, 1, 0, 0};
    int dc[4]={0, 0, -1, 1};
    for( int i=0; i<r;i++){
        for(int j = 0;j< c;j++){
            if(grid[i][j]=='0'){
            result[i][j]='.';
            for(int k=0;k<4;k++) {
                int ni = i+dr[k], nj = j+dc[k];
                if(ni >= 0 && ni < r && nj >= 0 && nj < c) {
                     result[ni][nj]='.';
                }
            }
        }
    }
        
}
return result;
}

vector<string> bomberMan(int n, vector<string> grid) {
    if(n==1) return grid;
    if (n % 2 == 0) {
        
    int r = grid.size(), c=grid[0].size();
    return vector<string>(r, string(c, '0'));
}
vector<string> first = explode(grid);
if( n% 4==3) {
    return first;
} else {
    return explode(first);
}
}

int main() {
    ofstream fout(getenv("OUTPUT_PATH"));
    
    string first_multiple_input_temp;
    getline(cin, first_multiple_input_temp);
    
    vector<string> first_multiple_input = split(rtrim(first_multiple_input_temp));
    int r = stoi(first_multiple_input[0]);
    int c = stoi(first_multiple_input[1]);
    int n = stoi(first_multiple_input[2]);
    
    vector<string> grid(r);
    for (int i = 0; i < r; i++) {
        string grid_item;
        getline(cin, grid_item);
        
        grid[i] = grid_item;
    }
    vector<string> result = bomberMan(n, grid);
    for(size_t i = 0; i< result.size(); i++) {
        fout << result[i];
        
        if(i != result.size() - 1) {
            fout << "\n";
        }
    }
    fout << "\n";
    fout.close();
    return 0;
}

string ltrim(const string &str) {
    string s(str);
    
    s.erase(
        s.begin(),
        find_if(s.begin(), s.end(), not1(ptr_fun<int, int>(isspace)))
    );
    
    return s;
}
string rtrim(const string &str) {
    string s(str);
    
    s.erase(
        find_if(s.rbegin(), s.rend(), not1(ptr_fun<int, int>(isspace))).base(),
        s.end()
    );
    
    return s;
}

vector<string> split(const string &str) {
    vector<string> tokens;
    string::size_type start = 0;
    string::size_type end = 0;
    
    while ((end = str.find(" ",start)) != string::npos) {
        tokens.push_back(str.substr(start, end - start));
        start = end + 1;
    }
    tokens.push_back(str.substr(start));
    return tokens;
}

